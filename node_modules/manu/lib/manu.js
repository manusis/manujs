var express = require('express'), path = require('path'), fs = require('fs');
var controller = require('./controller.js');
var app = express();
root = path.dirname(require.main.filename);

var exports = module.exports = {};
var controllers = exports.controllers = {};

var Controller = {
    init: function(app) {
        if (this.engine)
            app.set('view engine', this.engine);
        app.set('views', root + '/controllers/' + this.name + '/views');
                // before middleware support
        if (this.before) {
            path = '/' + this.name + '/:' + this.name + '_id';
            app.all(path, this.before);
            verbose && console.log('     ALL %s -> %s.before', path, this.name);
            path = '/' + this.name + '/:' + this.name + '_id/*';
            app.all(path, this.before);
            verbose && console.log('     ALL %s -> %s.before', path, this.name);
        }
                
    }
}

exports.loadRoutes = function() {
    require(root + '/config/routes.js');
}

exports.loadControllers = function(parent) {
    verbose = 1;
    fs.readdirSync(root + '/controllers').forEach(function(name) {
        verbose && console.log('\n   %s:', name);
        var obj = require(root + '/controllers/' + name), app = express();
        obj.name = name;
        obj.__proto__ = Controller;
        obj.init(app);
        controllers[name] = obj;
        exports.resource(name, app);
        parent.use(app);
    });
}

exports.resource = function(name, app) {
     var obj = require(root + '/controllers/' + name);
    for (var key in obj) {
        // "reserved" exports
        if (~['name', 'prefix', 'engine', 'before', 'init'].indexOf(key))
            continue;
        switch (key) {
            case 'show':
                method = 'get';
                path = '/' + name + '/:' + name + '_id';
                break;
            case 'list':
                method = 'get';
                path = '/' + name + 's';
                break;
            case 'edit':
                method = 'get';
                path = '/' + name + '/:' + name + '_id/edit';
                break;
            case 'update':
                method = 'put';
                path = '/' + name + '/:' + name + '_id';
                break;
            case 'create':
                method = 'post';
                path = '/' + name;
                break;

            default:
                throw new Error('unrecognized route: ' + name + '.' + key);
        }
        1 && console.log('     %s %s -> %s.%s', method.toUpperCase(), path, name, key);
        app[method](path, obj[key]);
    }
}
