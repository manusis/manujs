var express = require('express')
, path = require('path')
, fs = require('fs');

var app = express();
root = path.dirname(require.main.filename);

var exports = module.exports = initialize();
var controllers = exports.controllers = {};

exports.loadRoutes = function() {
    require(root + '/config/routes.js');
}
exports.loadControllers = function(app) {
    //controllers = {};
    verbose = 1;
    fs.readdirSync(root + '/controllers').forEach(function(name) {
        verbose && console.log('\n   %s:', name);
        
        var obj = require(root + '/controllers/' + name)
          , name = obj.name || name
          , prefix = obj.prefix || ''
          , app = express()
          , method
          , path;
          
        // allow specifying the view engine
        if (obj.engine) app.set('view engine', obj.engine);
        app.set('views', root + '/controllers/' + name + '/views');
        
        // before middleware support
        if (obj.before) {
          path = '/' + name + '/:' + name + '_id';
          app.all(path, obj.before);
          verbose && console.log('     ALL %s -> before', path);
          path = '/' + name + '/:' + name + '_id/*';
          app.all(path, obj.before);
          verbose && console.log('     ALL %s -> before', path);
        }
        controllers[name] = obj;
    });
}

exports.resource = function(name) {
    for (var key in controllers[name]) {
        // "reserved" exports
        if (~['name', 'prefix', 'engine', 'before'].indexOf(key))
            continue;
        switch (key) {
            case 'show':
                method = 'get';
                path = '/' + name + '/:' + name + '_id';
                break;
            case 'list':
                method = 'get';
                path = '/' + name + 's';
                break;
            case 'edit':
                method = 'get';
                path = '/' + name + '/:' + name + '_id/edit';
                break;
            case 'update':
                method = 'put';
                path = '/' + name + '/:' + name + '_id';
                break;
            case 'create':
                method = 'post';
                path = '/' + name;
                break;

            default:
                throw new Error('unrecognized route: ' + name + '.' + key);
        }
        console.log(method);
        console.log(key);
        console.log(controllers[name][key]);
        app[method](path, controllers[name][key]);
    }
            console.log(app.routes  );
                parent.use(app);


}


function initialize() {
    if(!fs.existsSync(root + "/controllers")) {
        mkdir(root + "/controllers");
    }
    if(!fs.existsSync(root + "/controllers")) {
        mkdir(root + "/controllers");
    }    
    return this;
}